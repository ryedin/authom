{
  "author": {
    "name": "Jed Schmidt",
    "email": "tr@nslator.jp",
    "url": "http://jed.is"
  },
  "name": "authom",
  "description": "A dependency-free multi-service authentication tool for node.js",
  "version": "0.4.0",
  "keywords": [
    "auth",
    "authorization",
    "oauth",
    "http"
  ],
  "homepage": "https://github.com/jed/authom",
  "contributors": [
    {
      "name": "Mark Lussier",
      "email": "mlussier@gmail.com",
      "url": "https://github.com/intabulas"
    }
  ],
  "main": "./lib/authom",
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/authom.git"
  },
  "engines": {
    "node": ">=0.6.15"
  },
  "devDependencies": {
    "express": "~2.5.4"
  },
  "optionalDependencies": {
    "oauth": ">=0.9.6"
  },
  "scripts": {
    "start": "sudo node ./example/server.js"
  },
  "readme": "authom\n=======\n\nauthom is an authentication library for node.js. It unifies authentication APIs for multiple services into a single EventEmitter, and works with both the built-in node.js HTTP module and as an Express/Connect app.\n\nauthom was designed to solve one problem and solve it well. It has an intuitive node.js-like API, no required dependencies, and doesn't force any particular persistence, session, or middleware approaches on you.\n\nExample\n-------\n\nFor the built-in node.js HTTP module:\n\n```javascript\n// Like socket.io, authom will intercept requests\n// for you to help keep your routes clean.\n\nvar server = require(\"http\").createServer()\n  , authom = require(\"authom\")\n\nserver.on(\"request\", function() {\n  // your usual server logic\n})\n\n// create servers for the services you'll be using\nauthom.createServer({ /* facebook credentials */ })\nauthom.createServer({ /* github credentials */ })\nauthom.createServer({ /* google credentials */ })\nauthom.createServer({ /* twitter credentials */ })\n// ... et cetera\n\nauthom.on(\"auth\", function(req, res, data) {\n  // called when a user is authenticated on any service\n})\n\nauthom.on(\"error\", function(req, res, data) {\n  // called when an error occurs during authentication\n})\n\nauthom.listen(server)\nserver.listen(8000)\n```\n\nFor Express/Connect:\n\n```javascript\nvar app = require(\"express\").createServer()\n  , authom = require(\"authom\")\n\n// create servers for the services you'll be using\nauthom.createServer({ /* facebook credentials */ })\nauthom.createServer({ /* github credentials */ })\nauthom.createServer({ /* google credentials */ })\nauthom.createServer({ /* twitter credentials */ })\n// ... et cetera\n\nauthom.on(\"auth\", function(req, res, data) {\n  // called when a user is authenticated on any service\n})\n\nauthom.on(\"error\", function(req, res, data) {\n  // called when an error occurs during authentication\n})\n\napp.get(\"/auth/:service\", authom.app)\n\napp.listen(8000)\n```\n\nSupported services\n------------------\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/37signals.ico\" style=\"vertical-align:middle\"> 37signals (by [nodebiscut](https://github.com/nodebiscut))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/dwolla.ico\" style=\"vertical-align:middle\"> Dwolla (by [nodebiscut](https://github.com/nodebiscut))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/facebook.ico\" style=\"vertical-align:middle\"> Facebook (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/foodspotting.ico\" style=\"vertical-align:middle\"> Foodspotting (by [kimtaro](https://github.com/kimtaro))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/foursquare.ico\" style=\"vertical-align:middle\"> Foursquare (by [nodebiscut](https://github.com/nodebiscut))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/github.ico\" style=\"vertical-align:middle\"> Github (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/google.ico\" style=\"vertical-align:middle\"> Google (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/gowalla.ico\" style=\"vertical-align:middle\"> Gowalla (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/instagram.ico\" style=\"vertical-align:middle\"> Instagram (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/meetup.ico\" style=\"vertical-align:middle\"> Meetup (by [softprops](https://github.com/softprops))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/soundcloud.ico\" style=\"vertical-align:middle\"> SoundCloud (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/twitter.ico\" style=\"vertical-align:middle\"> Twitter (by [jed](https://github.com/jed))\n\n<img src=\"https://github.com/jed/authom/raw/master/lib/assets/windowslive.ico\" style=\"vertical-align:middle\"> Windows Live (by [jed](https://github.com/jed))\n\nInstallation and Setup\n----------------------\n\nTo install, enter:\n\n    $ npm install authom\n\nTo see the demo, enter:\n\n    $ npm start authom\n\nAnd then head to http://authom.jedschmidt.com (which resolves to your local machine at `127.0.0.1`). `sudo` is needed to bind to port 80, as many providers do not allow callback URLs with a port or `localhost` as the host.\n\nFAQ\n---\n\n### How can I add my own service?\n\nSee **Extending authom** below.\n\n### Why not just use [everyauth](https://github.com/bnoguchi/everyauth)/[passport](https://github.com/jaredhanson/passport)? How is authom different?\n\nauthom aims to solve a smaller problem, more agnostically. It trades convenience for simplicity and flexibility. Here are some key differences:\n\n- authom was built for node, and can also work with Express, while everyauth is tied to Express and Connect. everyauth aims for a much more ambitious integration, but at the expense of locking you into a particular stack. authom takes a more UNIX approach; since it doesn't handle logins, persistence, sessions, or anything past authentication, it is more of a tool and less of a framework.\n\n- authom uses native node.js conventions such as EventEmitters and objects, while everyauth uses promises and a chaining config API. This is of course subjective, but the authom API aims to be closer to the APIs of node.js itself.\n\n- authom works with node.js v0.6. (this was not true of everyauth at the time this library was written)\n\nAPI\n---\n\n### authom.createServer(options, [function(req, res){}])\n\nCreates an EventEmitter for the given authentication service. The service is specified by the `service` key of the `options` object, with all other keys differing based on the service. For example, `github` would be called like this:\n\n```javascript\nvar github = authom.createServer({\n  service: \"github\",\n  id: \"7e38d12b740a339b2d31\",\n  secret: \"116e41bd4cd160b7fae2fe8cc79c136a884928c3\",\n  scope: [\"gist\"]\n})\n```\n\nAn optional `name` member can also be passed to override that used for authom path matching. So if you had two Github apps, you could set them as `name: github1` and `name: github2`, so that they could be accessed as `/auth/github1` and `/auth/github2`.\n\nYou can listen for `auth` and `error` events by:\n\n- listening to a specific service for service-specific events, or\n- listening to `authom` for all service events\n\nFor example, use this to listen for events from Github, based on the code above:\n\n```javascript\ngithub.on(\"auth\", function(req, res, gitHubSpecificData){})\ngithub.on(\"error\", function(req, res, gitHubSpecificData){})\n```\n\nOr, use this to listen to events from all provders, since authom already listens and namespaces them for you:\n\n```javascript\nauthom.on(\"auth\", function(req, res, data){})\nauthom.on(\"error\", function(req, res, data){})\n```\n\n### authom.on(\"auth\", function(req, res, data){})\n\nListens for successful authentications across all services. The listener is called with the original request/response objects as well as a service-specific user object, which contains the following keys:\n\n- `token`: the token resulting from authentication\n- `id`: the ID of the user on the remote service\n- `data`: the original data returned from the service, and\n- `service`: the name of the service, given so that you can branch your code:\n\n```javascript\nauthom.on(\"auth\", function(req, res, data) {\n  switch(data.service) {\n    case \"github\": ...\n    case \"google\": ...\n    .\n    .\n    .\n  }\n})\n```\n\n### authom.on(\"error\", function(req, res, data){})\n\nListens for failed authentications across all services. Like the `auth` event, the listener is called with the original request/response objects as well as an error object, allowing you to provide your own session scheme.\n\n### authom.listen(server)\n\nListens to an existing HTTP(S) server for `request` events. Like socket.io's `.listen` method, authom will intercept any request whose path starts with `/auth`.\n\n### authom.listener\n\nA standard node.js listener. This can be used for more control over the path at which authom is used. For example, the following two are equivalent:\n\n```javascript\n// socket.io-style\nvar server = require(\"http\").createServer()\n  , authom = require(\"authom\")\n\nserver.on(\"request\", function() {\n  /* your usual server logic */\n})\n\nauthom.listen(server)\nserver.listen(8000)\n```\n\n```javascript\n// route-style\nvar server = require(\"http\").createServer()\n  , authom = require(\"authom\")\n\nserver.on(\"request\", function(req, res) {\n  if (req.url.slice(5) == \"/auth\") authom.listener(req, res)\n\n  else {\n\t/* your usual server logic */\n  }\n})\n\nserver.listen(8000)\n```\n\n### authom.route\n\nA regular expression that is run on the pathname of every request. authom will only run if this expression is matched. By default, it is `/^\\/auth\\/([^\\/]+)\\/?$/`.\n\n### authom.app\n\nThis is a convenience Express app, which should be mounted at a path containing a `:service` parameter.\n\nProviders\n---------\n\n### 37signals ([create an app](https://integrate.37signals.com/apps/))\n\nOptions:\n\n- `service`: \"37signals\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Client secret`\n\nExample:\n\n```javascript\nvar signals = authom.createServer({\n  service: \"37signals\",\n  id: \"c2098292571a03070eb12746353997fb8d6f0e00\",\n  secret: \"4cb7f46fa83f73ec99d37162b946522b9e7a4d5a\"\n})\n```\n\n### Dwolla Live ([create an app](https://www.dwolla.com/applications))\n\nOptions:\n\n- `service`: \"dwolla\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Client secret`\n- `scope`: the scope requested.\n\nExample:\n\n```javascript\nvar windowslive = authom.createServer({\n  service: \"dwolla\",\n  id: \"0vNUP/9/GSBXEv69nqKZVfhSZbw8XQdnDiatyXSTM7vW1WzAAU\",\n  secret: \"KI2tdLiRZ813aclUxTgUVyDbxysoJQzPBjHTJ111nHMNdAVlcs\",\n  scope:\"AccountInfoFull\"\n})\n```\n\n### Facebook ([create an app](https://developers.facebook.com/apps))\n\nOptions:\n\n- `service`: \"facebook\"\n- `id`: the application's `App ID`\n- `secret`: the application's `App secret`\n- `scope` (optional): the scopes requested by your application\n\nExample:\n\n```javascript\nvar facebook = authom.createServer({\n  service: \"facebook\",\n  id: \"256546891060909\",\n  secret: \"e002572fb07423fa66fc38c25c9f49ad\",\n  scope: []\n})\n```\n\n### Foodspotting ([request api key](http://www.foodspotting.com/api))\n\nOptions:\n\n- `service`: \"foodspotting\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Client secret`\n\nExample:\n\n```javascript\nvar foodspotting = authom.createServer({\n  service: \"foodspotting\",\n  id: \"<api key>\",\n  secret: \"<api secret>\"\n})\n```\n\n### Foursquare ([create an app](https://foursquare.com/oauth/))\n\nOptions:\n\n- `service`: \"foursquare\"\n- `id`: the application's `CLIENT ID`\n- `secret`: the application's `CLIENT SECRET`\n\nExample:\n\n```javascript\nvar foursquare = authom.createServer({\n  service: \"foursquare\",\n  id: \"0DPGLE430Y2LFUCOSFXB0ACG3GGD5DNHH5335FLT4US1QDAZ\",\n  secret: \"WLNCAVFHCMQGVYOZTNOLPXW0XL2KN0DRD1APOA45SRGEZSGK\"\n})\n```\n\n### Github ([create an app](https://github.com/account/applications/new))\n\nOptions:\n\n- `service`: \"github\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Secret`\n- `scope` (optional): the scopes requested by your application, as explained [here](http://developer.github.com/v3/oauth/#scopes).\n\nExample:\n\n```javascript\nvar github = authom.createServer({\n  service: \"github\",\n  id: \"7e38d12b740a339b2d31\",\n  secret: \"116e41bd4cd160b7fae2fe8cc79c136a884928c3\",\n  scope: [\"gist\"]\n})\n```\n\nMake sure that the callback URL used by your application has the same hostname and port as that specified for your application. If they are different, you will get `redirect_uri_mismatch` errors.\n\n### Google ([create an app](https://code.google.com/apis/console/))\n\nOptions:\n\n- `service`: \"google\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Client secret`\n- `scope` (optional): the scopes requested by your application\n\nExample:\n\n```javascript\nvar google = authom.createServer({\n  service: \"google\",\n  id: \"515913292583.apps.googleusercontent.com\",\n  secret: \"UAjUGd_MD9Bkho-kazmJ5Icm\",\n  scope: \"\"\n})\n```\n\n### Gowalla ([create an app](http://gowalla.com/api/keys))\n\nOptions:\n\n- `service`: \"gowalla\"\n- `id`: the application's `API key`\n- `secret`: the application's `Secret key`\n\nExample:\n\n```javascript\nvar gowalla = authom.createServer({\n  service: \"gowalla\",\n  id: \"b8514b75c2674916b77c9a913783b9c2\",\n  secret: \"34f713fdd6b4488982328487f443bd6d\"\n})\n```\n\nMake sure that the callback URL used by your application is identical to that specified for your application. With the default settings, you'll need a redirect URI of `http://<your-host>/auth/google`.\n\n### Instagram ([create an app](http://instagram.com/developer/client/register/))\n\nOptions:\n\n- `service`: \"instagram\"\n- `id`: the application's `CLIENT ID`\n- `secret`: the application's `CLIENT SECRET`\n- `scope` (optional): the scopes requested by your application\n\nExample:\n\n```javascript\nvar instagram = authom.createServer({\n  service: \"instagram\",\n  id: \"e55497d0ebc24289aba4e715f1ab7d2a\",\n  secret: \"a0e7064bfda64e57a46dcdba48378776\"\n})\n```\n\n### SoundCloud ([create an app](http://soundcloud.com/you/apps/new))\n\nOptions:\n\n- `service`: \"soundcloud\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Client Secret`\n\nExample:\n\n```javascript\nvar soundcloud = authom.createServer({\n  service: \"soundcloud\",\n  id: \"9e5e7b0a891b4a2b13aeae9e5b0c89bb\",\n  secret: \"2f4df63c8ff10f466685c305e87eba6f\"\n})\n```\n\n### Twitter ([create an app](dev.twitter.com/apps/))\n\nOptions:\n\n- `service`: \"twitter\"\n- `id`: the application's `Consumer key`\n- `secret`: the application's `Consumer secret`\n\nExample:\n\n```javascript\nauthom.createServer({\n  service: \"twitter\",\n  id: \"LwjCfHAugMghuYtHLS9Ugw\",\n  secret: \"etam3XHqDSDPceyHti6tRQGoywiISY0vZWfzhQUxGL4\"\n})\n```\n\nNotes: Since Twitter is still (!) using the old OAuth1.0a protocol, it requires [@ciaranj](https://github.com/ciaranj)'s [node-oauth](https://github.com/ciaranj/node-oauth) library to be installed.\n\n### Windows Live ([create an app](https://manage.dev.live.com/Applications/Index))\n\nOptions:\n\n- `service`: \"windowslive\"\n- `id`: the application's `Client ID`\n- `secret`: the application's `Client secret`\n- `scope`: the scope requested.\n\nExample:\n\n```javascript\nvar windowslive = authom.createServer({\n  service: \"windowslive\",\n  id: \"000000004C06BA3A\",\n  secret: \"2RsIhweMq6PxR8jc5CjTVoCqTvKZmctY\",\n  scope: \"wl.basic\"\n})\n```\n\nExtending authom\n-----------------\n\nTo add an authentication service provider, add a javascript file for the service at the path `/lib/services/<service-name>.js`. This file should `module.exports` a constructor that returns an EventEmitter that listens for `request` events, and emits `auth` and `error` events to itself.\n\n```javascript\nvar EventEmitter = require(\"events\").EventEmitter\n\nmodule.exports = function(options) {\n  var server = new EventEmitter\n\n  server.on(\"request\", function(req, res) {\n    // respond to the request, redirecting the user as needed\n\n    if (successful) {\n      // pass an object containing the service's user data\n      server.emit(\"auth\", req, res, obj)\n    }\n\n    else {\n      // pass an object containing an error message\n      server.emit(\"error\", req, res, obj)\n    }\n  })\n\n  return server\n}\n```\n\nTo make sure that your code can recieve subsequent HTTP(S) calls from the service, use the inbound `req.url` as the callback URL, using the querystring to disambiguate different stages of the authentication process. See `/lib/services/github.js` for an example implementation.\n\nOnce you're done, and have written tests, make sure you open a pull request so that the rest of us can benefit!\n\nLicense\n-------\n\nCopyright (c) 2012 Jed Schmidt, http://jed.is/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "authom@0.4.0",
  "dependencies": {
    "oauth": ">=0.9.6"
  },
  "dist": {
    "shasum": "c09291b7bb9962f52b21ae32b04035a99e633e22"
  },
  "_from": "authom@git://github.com/ryedin/authom.git#4302b3bb1b071e7"
}
